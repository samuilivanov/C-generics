#include <stdio.h>
#include <string.h>

// Comparison function for integers

void *IntCmp(void *elem1, void *elem2){
    int *ip1 = elem1;
    int *ip2 = elem2;
    return *ip1 - *ip2;
}

// Generic Binary search algorithm
void *binarySearchBinary(void *key, void *base, int n, int elemBegin, int elemSize, int (*cmpfn)(void *, void *)){

    if(n >= elemBegin){

        int mid = elemBegin + (n - elemBegin)/2;
        void *elemAdress = (char*)base + mid*elemSize;

        if(cmpfn(elemAdress, key) == 0) return elemAdress; // Returning the index of the search element.

        else if(cmpfn(elemAdress, key) > 0) return binarySearchBinary(key, base, mid - 1, elemBegin, elemSize, cmpfn);

        else return binarySearchBinary(key, base, n, mid + 1, elemSize, cmpfn);
    }
    return 0;
}

// Integer specific binary search

int binarySearch(int key, int base[], int n, int elemBegin){
    int mid = elemBegin + (n - elemBegin)/2;

    if(base[mid] == key) return mid;

    else if(base[mid] > key) return binarySearch(key, base, mid - 1, elemBegin);

    else return binarySearch(key, base, n, mid +1);

    return -1;
}

int main()
{
    // Testing binary search algorithm
    int array[] = {0, 3, 4, 6, 8, 9, 13, 15, 20, 21};

    int key = 6;

    int n = sizeof(array)/sizeof(array[0]);

    int *found = binarySearchBinary(&key, &array, n - 1, 0, sizeof(int), IntCmp);

    if(found == NULL) printf("not found");
    else printf("found\n");

    return 0;
}
